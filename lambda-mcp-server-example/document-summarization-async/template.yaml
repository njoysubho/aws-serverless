AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Document Summarization with External LLM - Async Pattern

Parameters:
  OpenAIApiKey:
    Type: String
    NoEcho: true
    Description: OpenAI API Key (store in Parameter Store)

Globals:
  Function:
    Timeout: 30
    Runtime: python3.13
    Environment:
      Variables:
        JOBS_TABLE: !Ref JobsTable
        PROCESSING_QUEUE: !Ref ProcessingQueue
        OPENAI_API_KEY: !Ref OpenAIApiKey

Resources:
  # API Gateway
  DocumentSummaryApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'POST,GET,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"

  # S3 Bucket for document storage
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # DynamoDB table for job tracking
  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: jobId
          AttributeType: S
      KeySchema:
        - AttributeName: jobId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  # SQS Queue for async processing
  ProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeoutSeconds: 900  # 15 minutes
      MessageRetentionPeriod: 1209600  # 14 days
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 3

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600

  # Lambda Functions
  
  # 1. Upload Handler - Receives document and queues processing
  UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/upload/
      Handler: app.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DocumentSummaryApi
            Path: /upload
            Method: post
      Environment:
        Variables:
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
      Policies:
        - S3WritePolicy:
            BucketName: !Ref DocumentsBucket
        - DynamoDBWritePolicy:
            TableName: !Ref JobsTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt ProcessingQueue.QueueName

  # 2. Status Checker - Gets job status
  StatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/status/
      Handler: app.lambda_handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref DocumentSummaryApi
            Path: /status/{jobId}
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref JobsTable

  # 3. Processor - Processes documents with external LLM
  ProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/processor/
      Handler: app.lambda_handler
      Timeout: 900  # 15 minutes for LLM processing
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ProcessingQueue.Arn
            BatchSize: 1
      Environment:
        Variables:
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DocumentsBucket
        - DynamoDBWritePolicy:
            TableName: !Ref JobsTable
        - EventBridgePublishPolicy:
            EventBusName: default

  # 4. Notification Handler - Sends completion notifications
  NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/notifications/
      Handler: app.lambda_handler
      Events:
        DynamoDBEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt JobsTable.StreamArn
            StartingPosition: LATEST
            FilterCriteria:
              Filters:
                - Pattern: '{"eventName": ["MODIFY"], "dynamodb": {"NewImage": {"status": {"S": ["completed", "failed"]}}}}'

Outputs:
  ApiGatewayUrl:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${DocumentSummaryApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
  
  DocumentsBucket:
    Description: S3 bucket for documents
    Value: !Ref DocumentsBucket
    
  JobsTable:
    Description: DynamoDB table for job tracking
    Value: !Ref JobsTable